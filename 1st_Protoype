<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Major Project Ist Prototype</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
</head>
<body class="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white">
    <h1 class="text-2xl font-bold mb-4">Major Project Ist Prototype(Upto Shot-Classification)</h1>
    <button onclick="init()" class="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg shadow-md transition">
        Start Live Stream
    </button>
    <div class="mt-6 flex flex-col items-center">
        <div class="border-4 border-blue-500 rounded-lg overflow-hidden">
            <canvas id="canvas" class="w-[300px] h-[300px]"></canvas>
        </div>
        <div id="highest-label" class="mt-4 text-xl font-semibold text-yellow-400"></div>
        <div id="label-container" class="mt-4 text-lg hidden"></div>
    </div>

    <script>
        const URL = "https://teachablemachine.withgoogle.com/models/9f-aDAH58/";
        let model, webcam, ctx, labelContainer, highestLabel, maxPredictions;

        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            model = await tmPose.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();

            const size = 300;
            webcam = new tmPose.Webcam(size, size, true);
            await webcam.setup();
            await webcam.play();
            window.requestAnimationFrame(loop);

            const canvas = document.getElementById("canvas");
            canvas.width = size; canvas.height = size;
            ctx = canvas.getContext("2d");
            labelContainer = document.getElementById("label-container");
            highestLabel = document.getElementById("highest-label");
            labelContainer.innerHTML = "";
        }

        async function loop() {
            webcam.update();
            await predict();
            window.requestAnimationFrame(loop);
        }

        async function predict() {
            const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
            const prediction = await model.predict(posenetOutput);
            
            let highestPrediction = prediction.reduce((max, p) => p.probability > max.probability ? p : max, prediction[0]);
            highestLabel.innerText = `${highestPrediction.className}: ${highestPrediction.probability.toFixed(2)}`;

            drawPose(pose);
        }

        function drawPose(pose) {
            if (webcam.canvas) {
                ctx.drawImage(webcam.canvas, 0, 0);
                if (pose) {
                    const minPartConfidence = 0.5;
                    tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                    tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                }
            }
        }
    </script>
</body>
</html>
