<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Pose Classification Studio</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
        
        .bg-pattern {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
            pointer-events: none;
            z-index: 0;
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        .neon-border {
            box-shadow: 
                0 0 20px rgba(59, 130, 246, 0.3),
                inset 0 0 20px rgba(59, 130, 246, 0.1);
            border: 2px solid rgba(59, 130, 246, 0.5);
        }
        
        .pulse-glow {
            animation: pulse-glow 2s ease-in-out infinite alternate;
        }
        
        @keyframes pulse-glow {
            from {
                box-shadow: 
                    0 0 20px rgba(59, 130, 246, 0.3),
                    inset 0 0 20px rgba(59, 130, 246, 0.1);
            }
            to {
                box-shadow: 
                    0 0 30px rgba(59, 130, 246, 0.6),
                    inset 0 0 30px rgba(59, 130, 246, 0.2);
            }
        }
        
        .gradient-text {
            color: #ffffff;
            text-shadow: 
                0 0 20px rgba(59, 130, 246, 0.8),
                0 0 40px rgba(139, 92, 246, 0.6),
                0 0 60px rgba(6, 182, 212, 0.4),
                2px 2px 4px rgba(0, 0, 0, 0.5);
            animation: text-glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes text-glow {
            from {
                text-shadow: 
                    0 0 20px rgba(59, 130, 246, 0.8),
                    0 0 40px rgba(139, 92, 246, 0.6),
                    0 0 60px rgba(6, 182, 212, 0.4),
                    2px 2px 4px rgba(0, 0, 0, 0.5);
            }
            to {
                text-shadow: 
                    0 0 30px rgba(59, 130, 246, 1),
                    0 0 50px rgba(139, 92, 246, 0.8),
                    0 0 70px rgba(6, 182, 212, 0.6),
                    2px 2px 4px rgba(0, 0, 0, 0.7);
            }
        }
        
        @keyframes gradient-shift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .btn-glow {
            position: relative;
            background: linear-gradient(45deg, #3b82f6, #1d4ed8);
            transition: all 0.3s ease;
        }
        
        .btn-glow:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }
        
        .btn-glow:active {
            transform: translateY(0);
        }
        
        .stats-card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05));
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }
        
        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }
        
        .confidence-bar {
            background: linear-gradient(90deg, #10b981, #3b82f6, #8b5cf6);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981, #3b82f6);
            transition: width 0.5s ease;
            position: relative;
        }
        
        .confidence-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .status-indicator {
            position: relative;
        }
        
        .status-indicator::before {
            content: '';
            position: absolute;
            top: 50%;
            left: -20px;
            transform: translateY(-50%);
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: translateY(-50%) scale(1); }
            50% { opacity: 0.5; transform: translateY(-50%) scale(1.2); }
        }
        
        .floating {
            animation: floating 6s ease-in-out infinite;
        }
        
        @keyframes floating {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen text-white relative">
    <div class="bg-pattern"></div>
    
    <div class="container mx-auto px-6 py-8 relative z-10">
        <!-- Header Section -->
        <div class="text-center mb-12">
            <h1 class="text-5xl font-bold mb-4 gradient-text">
                AI Pose Classification Studio
            </h1>
            <p class="text-xl text-white/80 mb-8 font-light">
                Real-time pose detection and classification powered by machine learning
            </p>
            
            <button id="startBtn" onclick="init()" class="btn-glow px-8 py-4 text-white font-semibold rounded-xl shadow-lg transition-all duration-300 text-lg">
                <span class="flex items-center space-x-3">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                    <span>Start Live Stream</span>
                </span>
            </button>
        </div>

        <!-- Main Content Grid -->
        <div class="grid lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
            <!-- Camera Feed Section -->
            <div class="lg:col-span-2">
                <div class="glass-card rounded-2xl p-6">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-semibold mb-2">Live Camera Feed</h2>
                        <p class="text-white/70">Pose detection and skeleton tracking</p>
                    </div>
                    
                    <div class="relative mx-auto" style="width: fit-content;">
                        <div id="canvasContainer" class="neon-border rounded-2xl overflow-hidden bg-black/30" style="display: none;">
                            <canvas id="canvas" class="w-full h-auto max-w-[500px]"></canvas>
                        </div>
                        
                        <div id="placeholderContainer" class="neon-border rounded-2xl overflow-hidden bg-black/30 flex items-center justify-center" style="width: 500px; height: 400px;">
                            <div class="text-center floating">
                                <svg class="w-20 h-20 mx-auto mb-4 text-white/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                <p class="text-white/60 text-lg">Click "Start Live Stream" to begin</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stats and Controls Section -->
            <div class="space-y-6">
                <!-- Current Prediction -->
                <div class="stats-card rounded-2xl p-6">
                    <h3 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                        Current Prediction
                    </h3>
                    
                    <div id="highest-label" class="text-2xl font-bold text-center py-8 text-blue-300">
                        Waiting for stream...
                    </div>
                    
                    <div id="confidence-container" class="mt-4" style="display: none;">
                        <div class="flex justify-between text-sm text-white/70 mb-2">
                            <span>Confidence</span>
                            <span id="confidence-percent">0%</span>
                        </div>
                        <div class="confidence-bar h-3 bg-white/20 rounded-full">
                            <div id="confidence-fill" class="confidence-fill" style="width: 0%"></div>
                        </div>
                    </div>
                </div>

                <!-- System Status -->
                <div class="stats-card rounded-2xl p-6">
                    <h3 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-3 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        System Status
                    </h3>
                    
                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <span class="text-white/70">Model</span>
                            <span id="model-status" class="status-indicator pl-6 text-sm">Not Loaded</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-white/70">Camera</span>
                            <span id="camera-status" class="status-indicator pl-6 text-sm">Inactive</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-white/70">Processing</span>
                            <span id="processing-status" class="status-indicator pl-6 text-sm">Stopped</span>
                        </div>
                    </div>
                </div>

                <!-- All Predictions -->
                <div class="stats-card rounded-2xl p-6">
                    <h3 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-3 text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                        </svg>
                        All Predictions
                    </h3>
                    
                    <div id="all-predictions" class="space-y-3 max-h-80 overflow-y-auto">
                        <div class="text-center text-white/60 py-4">
                            Waiting for predictions...
                        </div>
                    </div>
                </div>

                <!-- Model Information -->
                <div class="stats-card rounded-2xl p-6">
                    <h3 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-3 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Model Info
                    </h3>
                    
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-white/70">Type</span>
                            <span>Pose Classification</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-white/70">Classes</span>
                            <span id="class-count">Loading...</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-white/70">Framework</span>
                            <span>TensorFlow.js</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hidden elements -->
        <div id="label-container" class="hidden"></div>
    </div>

    <script>
        const URL = "https://teachablemachine.withgoogle.com/models/9f-aDAH58/";
        let model, webcam, ctx, labelContainer, highestLabel, maxPredictions;
        let isStreaming = false;

        // Status elements
        const modelStatus = document.getElementById("model-status");
        const cameraStatus = document.getElementById("camera-status");
        const processingStatus = document.getElementById("processing-status");
        const classCount = document.getElementById("class-count");
        const startBtn = document.getElementById("startBtn");
        const canvasContainer = document.getElementById("canvasContainer");
        const placeholderContainer = document.getElementById("placeholderContainer");
        const confidenceContainer = document.getElementById("confidence-container");
        const confidenceFill = document.getElementById("confidence-fill");
        const confidencePercent = document.getElementById("confidence-percent");
        const allPredictions = document.getElementById("all-predictions");

        async function init() {
            if (isStreaming) return;
            
            try {
                // Update UI
                startBtn.innerHTML = '<span class="flex items-center space-x-3"><div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div><span>Loading...</span></span>';
                startBtn.disabled = true;
                
                // Load model
                modelStatus.textContent = "Loading...";
                const modelURL = URL + "model.json";
                const metadataURL = URL + "metadata.json";
                model = await tmPose.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();
                modelStatus.textContent = "Loaded";
                classCount.textContent = maxPredictions;

                // Setup webcam
                cameraStatus.textContent = "Initializing...";
                const size = 400;
                webcam = new tmPose.Webcam(size, size, true);
                await webcam.setup();
                await webcam.play();
                cameraStatus.textContent = "Active";

                // Setup canvas
                const canvas = document.getElementById("canvas");
                canvas.width = size;
                canvas.height = size;
                ctx = canvas.getContext("2d");
                
                // Show canvas, hide placeholder
                placeholderContainer.style.display = "none";
                canvasContainer.style.display = "block";
                confidenceContainer.style.display = "block";

                labelContainer = document.getElementById("label-container");
                highestLabel = document.getElementById("highest-label");

                // Start processing
                processingStatus.textContent = "Running";
                isStreaming = true;
                window.requestAnimationFrame(loop);

                // Update button
                startBtn.innerHTML = '<span class="flex items-center space-x-3"><svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9l3 3 3-3"></path></svg><span>Stream Active</span></span>';
                startBtn.className = startBtn.className.replace('btn-glow', 'bg-green-500 hover:bg-green-600');
                
            } catch (error) {
                console.error("Error initializing:", error);
                modelStatus.textContent = "Error";
                cameraStatus.textContent = "Error";
                startBtn.innerHTML = '<span class="flex items-center space-x-3"><svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>Try Again</span></span>';
                startBtn.disabled = false;
            }
        }

        async function loop() {
            if (!isStreaming) return;
            webcam.update();
            await predict();
            window.requestAnimationFrame(loop);
        }

        async function predict() {
            try {
                const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
                const prediction = await model.predict(posenetOutput);
                
                // Sort predictions by probability
                const sortedPredictions = [...prediction].sort((a, b) => b.probability - a.probability);
                let highestPrediction = sortedPredictions[0];
                
                // Update main prediction display
                highestLabel.textContent = highestPrediction.className;
                
                // Update confidence bar for highest prediction
                const confidence = Math.round(highestPrediction.probability * 100);
                confidenceFill.style.width = confidence + "%";
                confidencePercent.textContent = confidence + "%";
                
                // Update all predictions display
                updateAllPredictions(sortedPredictions);
                
                // Draw pose
                drawPose(pose);
                
            } catch (error) {
                console.error("Prediction error:", error);
            }
        }

        function updateAllPredictions(predictions) {
            allPredictions.innerHTML = '';
            
            predictions.forEach((pred, index) => {
                const confidence = Math.round(pred.probability * 100);
                const isHighest = index === 0;
                
                const predictionElement = document.createElement('div');
                predictionElement.className = `p-3 rounded-lg transition-all duration-300 ${
                    isHighest ? 'bg-blue-500/20 border border-blue-400/30' : 'bg-white/5'
                }`;
                
                predictionElement.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <span class="font-medium ${isHighest ? 'text-blue-300' : 'text-white/80'}">${pred.className}</span>
                        <span class="text-sm ${isHighest ? 'text-blue-200' : 'text-white/60'}">${confidence}%</span>
                    </div>
                    <div class="w-full bg-white/20 rounded-full h-2">
                        <div 
                            class="h-2 rounded-full transition-all duration-500 ${
                                isHighest ? 'bg-blue-400' : 'bg-white/40'
                            }" 
                            style="width: ${confidence}%"
                        ></div>
                    </div>
                `;
                
                allPredictions.appendChild(predictionElement);
            });
        }

        function drawPose(pose) {
            if (webcam.canvas) {
                ctx.drawImage(webcam.canvas, 0, 0);
                if (pose) {
                    const minPartConfidence = 0.5;
                    tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                    tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                }
            }
        }
    </script>
</body>
</html>
